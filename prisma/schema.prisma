generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ======================= EMPLOYEE =======================
model EmployeeGroup {
  id        String     @id @default(uuid())
  groupName String
  employees Employee[] @relation("EmployeeGroupEmployees")

  @@map("employee_groups")
}

model Employee {
  id       String        @id @default(uuid())
  groupId  String
  group    EmployeeGroup @relation("EmployeeGroupEmployees", fields: [groupId], references: [id])
  name     String
  lastname String
  phone    String
  username String        @unique
  password String?

  createdClients         Client[]      @relation("CreatedClients")
  updatedClients         Client[]      @relation("UpdatedClients")
  createdSuppliers       Supplier[]    @relation("CreatedSuppliers")
  updatedSuppliers       Supplier[]    @relation("UpdatedSuppliers")
  takenReservations      Reservation[] @relation("ResTaker")
  authorizedReservations Reservation[] @relation("Authorized")

  registers Register[] @relation("CreatedRegisters") // Kasa kayıtlarını oluşturan personel
}

// ======================= CLIENT =======================
model Client {
  id           String   @id @default(uuid())
  company      String
  clientType   String
  currency     String
  tax          String?
  limit        Int
  createdAt    DateTime @default(now())
  whoCreatedId String
  whoCreated   Employee @relation("CreatedClients", fields: [whoCreatedId], references: [id])

  lastUpdate   DateTime?
  whoUpdatedId String?
  whoUpdated   Employee? @relation("UpdatedClients", fields: [whoUpdatedId], references: [id])

  registers Register[] // Kasa kayıtlarıyla ilişki
}

// ======================= SUPPLIER =======================
model Supplier {
  id           String   @id @default(uuid())
  name         String
  supplierType String
  currency     String
  tax          String?
  limit        Int?
  createdAt    DateTime @default(now())
  createdById  String
  createdBy    Employee @relation("CreatedSuppliers", fields: [createdById], references: [id])
  updatedById  String
  updatedBy    Employee @relation("UpdatedSuppliers", fields: [updatedById], references: [id])
  lastUpdate   DateTime
}

// ======================= COMPANY RATE =======================
model CompanyRate {
  id          String   @id @default(uuid())
  company     String
  m1          Float
  m2          Float
  m3          Float
  v1          Float
  v2          Float
  currency    String
  startDate   DateTime
  endDate     DateTime
  description String?
  createdAt   DateTime @default(now())

  Reservation Reservation[]
}

// ======================= DRIVER =======================
model Driver {
  id         String  @id @default(uuid())
  driverName String
  phone      String
  license    String
  capacity   Int
  brand      String?
  color      String?

  transfers Transfer[]
}

// ======================= EXPENSE =======================
model ExpenseGroup {
  id               String   @id @default(uuid())
  expenseGroupName String
  createdAt        DateTime @default(now())

  expenses Expense[]
}

model Expense {
  id             String       @id @default(uuid())
  expenseGroupId String
  expenseGroup   ExpenseGroup @relation(fields: [expenseGroupId], references: [id])
  expenseName    String
  ship           Boolean
  accountant     Boolean
  createdAt      DateTime     @default(now())
}

// ======================= INCOMES =======================
model GeneralIncome {
  id              String   @id @default(uuid())
  menuName        String
  currency        String
  flierPrice      Float
  otelPrice       Float
  fiveAndFarPrice Float
  agencyPrice     Float
  guidePrice      Float
  individualPrice Float
  companyPrice    Float
  onlinePrice     Float
  othersPrice     Float
  startedAt       DateTime
  endedAt         DateTime
  createdAt       DateTime @default(now())
}

model Income {
  id         String   @id @default(uuid())
  name       String
  tax        Float
  ship       Boolean
  accountant Boolean
  createdAt  DateTime @default(now())
}

model LocationIncome {
  id              String   @id @default(uuid())
  menuName        String
  currency        String
  flierPrice      Float
  otelPrice       Float
  fiveAndFarPrice Float
  agencyPrice     Float
  guidePrice      Float
  individualPrice Float
  companyPrice    Float
  onlinePrice     Float
  othersPrice     Float
  startedAt       DateTime
  endedAt         DateTime
  createdAt       DateTime @default(now())
}

model SubIncome {
  id              String   @id @default(uuid())
  menuName        String
  currency        String
  flierPrice      Float
  otelPrice       Float
  fiveAndFarPrice Float
  agencyPrice     Float
  guidePrice      Float
  individualPrice Float
  companyPrice    Float
  onlinePrice     Float
  othersPrice     Float
  startedAt       DateTime
  endedAt         DateTime
  createdAt       DateTime @default(now())
}

// ======================= SALOON =======================
model Saloon {
  id          String   @id @default(uuid())
  ship        String
  saloonName  String
  description String?
  createdAt   DateTime @default(now())

  resTables    ResTable[]
  reservations Reservation[]
}

// ======================= RES TABLE =======================
model ResTable {
  id       String @id @default(uuid())
  name     String
  capacity Int
  saloonId String
  saloon   Saloon @relation(fields: [saloonId], references: [id])

  reservations Reservation[]
}

// ======================= TRANSFER =======================
model TransferLocation {
  id           String  @id @default(uuid())
  locationName String
  time         String
  description  String?

  transferPoints TransferPoint[]
  transfers      Transfer[]
}

model TransferPoint {
  id                String           @id @default(uuid())
  transferPointName String
  time              String
  description       String?
  createdAt         DateTime         @default(now())
  locationId        String
  location          TransferLocation @relation(fields: [locationId], references: [id])

  transfers Transfer[]
}

model Transfer {
  id                 String  @id @default(uuid())
  personQuantity     Int
  time               String
  transferDesc       String?
  transferLocationId String
  transferPointId    String
  driverId           String?
  reservationId      String?

  transferLocation TransferLocation @relation(fields: [transferLocationId], references: [id])
  transferPoint    TransferPoint    @relation(fields: [transferPointId], references: [id])
  driver           Driver?          @relation(fields: [driverId], references: [id])

  reservation Reservation? @relation(fields: [reservationId], references: [id], onDelete: Cascade)
}

// ======================= RESERVATION =======================
enum PaymentType {
  Gemide
  Cari
  Comp
  Komisyonsuz
}

model Reservation {
  id            String   @id @default(uuid())
  reservationNo Int      @unique
  date          DateTime
  room          String?
  voucherNo     String?
  nationality   String?
  description   String?
  transferNote  String?
  ship          String?
  m1            Int      @default(0)
  m2            Int      @default(0)
  m3            Int      @default(0)
  v1            Int      @default(0)
  v2            Int      @default(0)
  full          Int?
  half          Int?
  infant        Int?
  guide         Int?
  totalPerson   Int?
  fullPrice     Float    @default(0)
  tour          String?

  moneyReceived     Float @default(0)
  moneyToPayCompany Float @default(0)

  paymentType PaymentType

  companyRateId String
  companyRate   CompanyRate @relation(fields: [companyRateId], references: [id])

  resTakerId String
  resTaker   Employee @relation("ResTaker", fields: [resTakerId], references: [id])

  authorizedId String
  authorized   Employee @relation("Authorized", fields: [authorizedId], references: [id])

  saloonId String?
  saloon   Saloon? @relation(fields: [saloonId], references: [id])

  resTableId String?
  resTable   ResTable? @relation(fields: [resTableId], references: [id])

  arrivalTransfer String?
  returnTransfer  String?

  arrivalLocation String?
  returnLocation  String?

  companyDebtId String?
  companyDebt   CompanyDebt? @relation("CompanyDebtReservations", fields: [companyDebtId], references: [id])

  transfers Transfer[] // One-to-many ilişki

  createdAt DateTime   @default(now())
  registers Register[] // Kasa kayıtlarıyla ilişki
}

// ======================OUTCOMES==========================

model OutcomeGroup {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())

  outcomes Outcome[] // Relation to Outcome
}

model Outcome {
  id         String       @id @default(uuid())
  groupId    String
  group      OutcomeGroup @relation(fields: [groupId], references: [id])
  name       String
  ship       Boolean
  accountant Boolean
  createdAt  DateTime     @default(now())
}

model CompanyDebt {
  id            String   @id
  companyRateId String?  @unique // nullable yaptık
  name          String
  companyType   String
  currency      String
  tax           Float    @default(0)
  debt          Float    @default(0)
  credit        Float    @default(0)
  balance       Float    @default(0)
  createdAt     DateTime @default(now())

  reservations Reservation[] @relation("CompanyDebtReservations")

  registers Register[] // Kasa kayıtlarıyla ilişki

  @@map("company_debts")
}

enum Currency {
  TRY
  EUR
  USD
  GBP
}

enum AccountType {
  GEMI_KASA_TRY
  GEMI_KASA_EUR
  GEMI_KASA_USD
  GEMI_KASA_GBP
  ISBANK_POS_TRY
  ISBANK_POS_EUR
  ISBANK_POS_USD
}

model Register {
  id            String       @id @default(uuid())
  ship          String?
  reservationId String?
  reservation   Reservation? @relation(fields: [reservationId], references: [id])

  clientId String?
  client   Client? @relation(fields: [clientId], references: [id])

  companyDebtId String?
  companyDebt   CompanyDebt? @relation(fields: [companyDebtId], references: [id])

  groupName   String?
  accountType AccountType
  entry       Float       @default(0)
  out         Float       @default(0)
  currency    Currency
  description String?
  receiptDate DateTime
  createdAt   DateTime    @default(now())

  createdById String
  createdBy   Employee @relation("CreatedRegisters", fields: [createdById], references: [id])
}
