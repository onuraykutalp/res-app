generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ======================= EMPLOYEE =======================
model EmployeeGroup {
  id        String     @id @default(uuid())
  groupName String
  employees Employee[] @relation("EmployeeGroupEmployees")

  @@map("employee_groups")
}

model Employee {
  id       String        @id @default(uuid())
  groupId  String
  group    EmployeeGroup @relation("EmployeeGroupEmployees", fields: [groupId], references: [id])
  name     String
  lastname String
  phone    String
  username String        @unique
  password String?

  createdClients         Client[]      @relation("CreatedClients")
  updatedClients         Client[]      @relation("UpdatedClients")
  createdSuppliers       Supplier[]    @relation("CreatedSuppliers")
  updatedSuppliers       Supplier[]    @relation("UpdatedSuppliers")
  takenReservations      Reservation[] @relation("ReservationResTaker")
  authorizedReservations Reservation[] @relation("ReservationAuthorized")
}

// ======================= CLIENT =======================
model Client {
  id           String   @id @default(uuid())
  company      String
  clientType   String
  currency     String
  tax          String?
  limit        Int
  createdAt    DateTime @default(now())
  whoCreatedId String
  whoCreated   Employee @relation("CreatedClients", fields: [whoCreatedId], references: [id])

  lastUpdate   DateTime?
  whoUpdatedId String?
  whoUpdated   Employee? @relation("UpdatedClients", fields: [whoUpdatedId], references: [id])

  reservations Reservation[]
}

// ======================= SUPPLIER =======================
model Supplier {
  id           String   @id @default(uuid())
  name         String
  supplierType String
  currency     String
  tax          String?
  limit        Int?
  createdAt    DateTime @default(now())
  createdById  String
  createdBy    Employee @relation("CreatedSuppliers", fields: [createdById], references: [id])
  updatedById  String
  updatedBy    Employee @relation("UpdatedSuppliers", fields: [updatedById], references: [id])
  lastUpdate   DateTime
}

// ======================= COMPANY RATE =======================
model CompanyRate {
  id          String   @id @default(uuid())
  company     String
  m1          Float
  m2          Float
  m3          Float
  v1          Float
  v2          Float
  currency    String
  startDate   DateTime
  endDate     DateTime
  description String?
  createdAt   DateTime @default(now())
}

// ======================= DRIVER =======================
model Driver {
  id         String  @id @default(uuid())
  driverName String
  phone      String
  license    String
  capacity   Int
  brand      String?
  color      String?

  transfers Transfer[]
}

// ======================= EXPENSE =======================
model ExpenseGroup {
  id               String   @id @default(uuid())
  expenseGroupName String
  createdAt        DateTime @default(now())

  expenses Expense[]
}

model Expense {
  id             String       @id @default(uuid())
  expenseGroupId String
  expenseGroup   ExpenseGroup @relation(fields: [expenseGroupId], references: [id])
  expenseName    String
  ship           Boolean
  accountant     Boolean
  createdAt      DateTime     @default(now())
}

// ======================= INCOMES =======================
model GeneralIncome {
  id              String   @id @default(uuid())
  menuName        String
  currency        String
  flierPrice      Float
  otelPrice       Float
  fiveAndFarPrice Float
  agencyPrice     Float
  guidePrice      Float
  individualPrice Float
  companyPrice    Float
  onlinePrice     Float
  othersPrice     Float
  startedAt       DateTime
  endedAt         DateTime
  createdAt       DateTime @default(now())
}

model Income {
  incomeId   String   @id @default(uuid())
  incomeName String
  incomeTax  Float
  ship       Boolean
  accountant Boolean
  createdAt  DateTime @default(now())
}

model LocationIncome {
  id              String   @id @default(uuid())
  menuName        String
  currency        String
  flierPrice      Float
  otelPrice       Float
  fiveAndFarPrice Float
  agencyPrice     Float
  guidePrice      Float
  individualPrice Float
  companyPrice    Float
  onlinePrice     Float
  othersPrice     Float
  startedAt       DateTime
  endedAt         DateTime
  createdAt       DateTime @default(now())
}

model SubIncome {
  id              String   @id @default(uuid())
  menuName        String
  currency        String
  flierPrice      Float
  otelPrice       Float
  fiveAndFarPrice Float
  agencyPrice     Float
  guidePrice      Float
  individualPrice Float
  companyPrice    Float
  onlinePrice     Float
  othersPrice     Float
  startedAt       DateTime
  endedAt         DateTime
  createdAt       DateTime @default(now())
}

// ======================= SALOON =======================
model Saloon {
  id          String   @id @default(uuid())
  ship        String
  saloonName  String
  description String?
  createdAt   DateTime @default(now())

  resTables    ResTable[]
  reservations Reservation[]
}

// ======================= RES TABLE =======================
model ResTable {
  id       String @id @default(uuid())
  name     String
  capacity Int
  saloonId String
  saloon   Saloon @relation(fields: [saloonId], references: [id])

  reservations Reservation[]
}

// ======================= TRANSFER =======================
model TransferLocation {
  id           String  @id @default(uuid())
  locationName String
  time         String
  description  String?

  transferPoints TransferPoint[]
  transfers      Transfer[]
}

model TransferPoint {
  id                String           @id @default(uuid())
  transferPointName String
  time              String
  description       String?
  createdAt         DateTime         @default(now())
  locationId        String
  location          TransferLocation @relation(fields: [locationId], references: [id])

  arrivalReservations Reservation[] @relation("ArrivalTransferReservations")
  returnReservations  Reservation[] @relation("ReturnTransferReservations")

  transfers Transfer[]
}

model Transfer {
  id                 String  @id @default(uuid())
  personQuantity     Int
  time               String
  transferDesc       String?
  transferLocationId String
  transferPointId    String
  driverId           String? // opsiyonel
  reservationId      String? // opsiyonel çünkü transfer bağımsız olabilir

  transferLocation TransferLocation @relation(fields: [transferLocationId], references: [id])
  transferPoint    TransferPoint    @relation(fields: [transferPointId], references: [id])
  driver           Driver?          @relation(fields: [driverId], references: [id])
  reservation      Reservation?     @relation(fields: [reservationId], references: [id], onDelete: Cascade)
}

// ======================= RESERVATION =======================
enum PaymentType {
  Gemide
  Cari
  Comp
  Komisyonsuz
}

model Reservation {
  id           String   @id @default(uuid())
  date         DateTime
  room         String?
  voucherNo    String?
  nationality  String?
  description  String?
  transferNote String?
  ship         String

  fromWhoId String?
  fromWho   Client? @relation(fields: [fromWhoId], references: [id])

  resTakerId String
  resTaker   Employee @relation("ReservationResTaker", fields: [resTakerId], references: [id])

  authorizedId String
  authorized   Employee @relation("ReservationAuthorized", fields: [authorizedId], references: [id])

  arrivalTransferId String?
  arrivalTransfer   TransferPoint? @relation("ArrivalTransferReservations", fields: [arrivalTransferId], references: [id])

  returnTransferId String?
  returnTransfer   TransferPoint? @relation("ReturnTransferReservations", fields: [returnTransferId], references: [id])

  saloonId String
  saloon   Saloon @relation(fields: [saloonId], references: [id])

  resTableId String
  resTable   ResTable @relation(fields: [resTableId], references: [id])

  m1 Int
  m2 Int
  m3 Int
  v1 Int
  v2 Int

  full        Int
  half        Int
  infant      Int
  guide       Int
  totalPerson Int

  tour Json?

  paymentType PaymentType

  moneyReceived     Float
  moneyToPayCompany Float

  fullPrice Float

  transfers Transfer[]

  createdAt DateTime @default(now())
}
